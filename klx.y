%{
#include <stdio.h>
int yylex();
int yyerror(const char *msg);

void set_color(float r, float g, float b) {
   printf("%f %f %f setrgbcolor\n", r, g, b);
}

%}

%token RED 1
%token ORANGE 2
%token YELLOW 3
%token GREEN 4
%token BLUE 5
%token PURPLE 6

%token SQUARE 7
%token TRIANGLE 8
%token CIRCLE 9
%token DIAMOND 10

%token AT 11
%token NUMBER 12

%token PERIOD 13

%token PLUS 14;
%token MULT 15;
%token OPAREN 16;
%token CPAREN 17;
%token SUBTRACT 18;
%token DIVIDE 19;
%token EXPONENT 20;
%token MOD 21;
%token COMMA 22;

%error-verbose

%%

program: header shape_list trailer;
header: {
   printf("%%!PS\n\n"
          "%%%% Cameron Taylor\n"
          "%%%% Generated by KLX version 0.0\n\n");
};
trailer: {
   printf("\n%%END\n");
};

shape_list: shape;
shape_list: shape shape_list;

shape: color geometry location PERIOD {
   printf("klx_geom\n"
          "grestore\n\n");
};

location: AT OPAREN expr COMMA expr CPAREN {
   printf("gsave\n"
          "translate\n");
};

color: RED {
   set_color(1.0f, 0.0f, 0.0f);
};
color: ORANGE {
   set_color(1.0f, 0.5f, 0.0f);
};
color: YELLOW {
   set_color(1.0f, 1.0f, 0.0f);
};
color: GREEN {
   set_color(0.0f, 1.0f, 0.0f);
};
color: BLUE {
   set_color(0.0f, 0.0f, 1.0f);
};
color: PURPLE {
   set_color(0.5f, 0.0f, 1.0f);
};

geometry: SQUARE {
   printf("/klx_geom { newpath 0 0 moveto 0 10 lineto 10 10 lineto 10 0 lineto closepath fill } def\n");
};
geometry: TRIANGLE {
   printf("/klx_geom { newpath 0 0 moveto 10 0 lineto 5 10 lineto closepath fill } def\n");
};
geometry: CIRCLE {
   printf("/klx_geom { 5 5 5 0 360 arc closepath fill } def\n");
};
geometry: DIAMOND {
   printf("/klx_geom { newpath 5 0 moveto 0 5 lineto 5 10 lineto 10 5 lineto closepath fill } def\n");
};

expr: expr PLUS term {
   printf("add ");
};
expr: expr SUBTRACT term {
   printf("sub ");
};
expr: term;
term: term EXPONENT prod {
   printf("exp ");
};
term: prod;
prod: prod MULT atom {
   printf("mul ");
};
prod: prod DIVIDE atom {
   printf("div ");
};
prod: prod MOD atom {
   printf("mod ");
};
prod: atom;
atom: SUBTRACT atom {
   printf("-1 mul ");
};
atom: NUMBER {
   printf("%d ", $1);
};
atom: OPAREN expr CPAREN;

%%

int yyerror(const char *msg) {
   fprintf(stderr, "ERROR: %s\n", msg);
   return 0;
}

int main(void) {
   yyparse();
   return 0;
}
